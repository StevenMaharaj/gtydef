// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: protos/gty.proto

package gtydef

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GtyClient is the client API for Gty service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GtyClient interface {
	Connect(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	StreamObSTIR(ctx context.Context, in *Request, opts ...grpc.CallOption) (Gty_StreamObSTIRClient, error)
}

type gtyClient struct {
	cc grpc.ClientConnInterface
}

func NewGtyClient(cc grpc.ClientConnInterface) GtyClient {
	return &gtyClient{cc}
}

func (c *gtyClient) Connect(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/gty.Gty/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gtyClient) StreamObSTIR(ctx context.Context, in *Request, opts ...grpc.CallOption) (Gty_StreamObSTIRClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gty_ServiceDesc.Streams[0], "/gty.Gty/StreamObSTIR", opts...)
	if err != nil {
		return nil, err
	}
	x := &gtyStreamObSTIRClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gty_StreamObSTIRClient interface {
	Recv() (*L1, error)
	grpc.ClientStream
}

type gtyStreamObSTIRClient struct {
	grpc.ClientStream
}

func (x *gtyStreamObSTIRClient) Recv() (*L1, error) {
	m := new(L1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GtyServer is the server API for Gty service.
// All implementations must embed UnimplementedGtyServer
// for forward compatibility
type GtyServer interface {
	Connect(context.Context, *Request) (*Response, error)
	StreamObSTIR(*Request, Gty_StreamObSTIRServer) error
	mustEmbedUnimplementedGtyServer()
}

// UnimplementedGtyServer must be embedded to have forward compatible implementations.
type UnimplementedGtyServer struct {
}

func (UnimplementedGtyServer) Connect(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedGtyServer) StreamObSTIR(*Request, Gty_StreamObSTIRServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamObSTIR not implemented")
}
func (UnimplementedGtyServer) mustEmbedUnimplementedGtyServer() {}

// UnsafeGtyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GtyServer will
// result in compilation errors.
type UnsafeGtyServer interface {
	mustEmbedUnimplementedGtyServer()
}

func RegisterGtyServer(s grpc.ServiceRegistrar, srv GtyServer) {
	s.RegisterService(&Gty_ServiceDesc, srv)
}

func _Gty_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GtyServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gty.Gty/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GtyServer).Connect(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gty_StreamObSTIR_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GtyServer).StreamObSTIR(m, &gtyStreamObSTIRServer{stream})
}

type Gty_StreamObSTIRServer interface {
	Send(*L1) error
	grpc.ServerStream
}

type gtyStreamObSTIRServer struct {
	grpc.ServerStream
}

func (x *gtyStreamObSTIRServer) Send(m *L1) error {
	return x.ServerStream.SendMsg(m)
}

// Gty_ServiceDesc is the grpc.ServiceDesc for Gty service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gty_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gty.Gty",
	HandlerType: (*GtyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Gty_Connect_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamObSTIR",
			Handler:       _Gty_StreamObSTIR_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/gty.proto",
}
